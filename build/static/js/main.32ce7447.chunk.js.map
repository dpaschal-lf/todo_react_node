{"version":3,"sources":["dateConvert.js","TodoListItem.js","handleToken.js","TodoList.js","modal/Modal.js","TodoDetails.js","TodoCreate.js","TodoApp.js","serviceWorker.js","index.js"],"names":["getMonth","dateObj","getDayOfWeek","getDay","getOrdinal","number","props","dateObject","Date","data","added","formattedDate","getDate","getFullYear","to","id","className","title","onClick","e","stopPropagation","onChange","checkedValue","target","checked","completeUpdateCallback","type","completed","res","token","headers","get","localStorage","userToken","TodoList","changeItemComplete","bind","state","this","loadListData","fetch","method","body","JSON","stringify","getItem","then","handleToken","json","setState","length","map","TodoListItem","key","React","Component","Modal","close","display","oldProps","oldState","closeCallback","style","children","TodoDetails","hideModal","confirmDelete","handleDelete","edit","modalMessage","match","params","Fragment","history","push","value","name","description","TodoCreate","updateFormElement","saveItem","cancelItem","form","getAttribute","putItem","postItem","placeholder","for","TodoApp","menu","pathParts","location","pathname","split","currentMenu","exact","path","component","withRouter","Boolean","window","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.32ce7447.chunk.js","sourcesContent":["\nexport function getMonth( dateObj ){\n    const months = ['january','february','march','april','may','june','july','august','september','october','november','december'];\n    return months[ dateObj.getMonth()-1];\n}\n\nexport function getDayOfWeek( dateObj ){\n    const days= ['sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday'];\n    return days[dateObj.getDay()];\n}\n\nexport function getOrdinal( number ){\n    switch(number){\n        case 1: return 'st';\n        case 2: return 'nd';\n        case 3: return 'rd';\n        default: return 'th';\n    }\n}","import React from 'react';\nimport {Link} from 'react-router-dom';\nimport {getMonth, getDayOfWeek, getOrdinal} from './dateConvert.js';\n\n\nexport default props => {\n    const handleCompleteToggle = ( e )=>{\n        e.stopPropagation();\n        const element = e.target;\n        const checkedValue = element.checked ? 'completed' : 'active';\n        props.completeUpdateCallback( props.data.id, checkedValue );\n    }\n    const dateObject = new Date(props.data.added);\n    const formattedDate = `${getDayOfWeek(dateObject)}, ${getMonth(dateObject)} ${dateObject.getDate()}${getOrdinal(dateObject.getDate())}, ${dateObject.getFullYear()}`;\n    return (\n        <Link to={`/details/${props.data.id}`} className=\"todoListItem row\">\n            <div className=\"title col-sm-5\">{props.data.title}</div>\n            <div className=\"added col-sm-5\">{formattedDate}</div>\n            <div className=\"controlArea col-sm-2\">\n                <input onClick={e=> e.stopPropagation() } onChange={handleCompleteToggle} type=\"checkbox\" checked={props.data.completed ==='completed'?'checked':''}/>\n            </div>\n        </Link>\n    )\n}","\nexport default function( res ){\n    const token = res.headers.get('userToken')\n    if(token){\n        localStorage.userToken = token;\n    }\n}","import React from 'react'; \nimport TodoListItem from './TodoListItem';\nimport handleToken from './handleToken';\n\nclass TodoList extends React.Component{\n    constructor(props){\n        super(props);\n        this.changeItemComplete = this.changeItemComplete.bind( this );\n        this.state = {\n            data: []\n        };\n    }\n    componentDidMount(){\n        this.loadListData();\n    }\n    changeItemComplete( id, completed ){\n        fetch('/api/items/'+id,{\n            method:'PUT',\n            body: JSON.stringify( {\n                id,\n                completed\n            } ),\n            headers: {\n                token: localStorage.getItem('userToken'),\n                'Content-Type': 'application/json',\n            }\n        })\n        .then( (res)=>{\n            handleToken( res );\n            this.loadListData();\n        } )              \n    }\n    loadListData(){\n        fetch('/api/items',{\n            headers: {\n                token: localStorage.getItem('userToken')\n            }\n        })\n            .then( res => {\n                handleToken( res );\n                return res.json();\n            } )\n            .then( data => {\n                this.setState({\n                    data\n                });\n            })        \n    }\n    render(){\n        return(<div>\n            { !this.state.data.length \n                ? 'no data available' \n                : this.state.data.map( data=> <TodoListItem data={data} key={data.id} completeUpdateCallback={this.changeItemComplete}/> )\n            }\n        </div>)\n    }\n}\n\nexport default TodoList;","import React from 'react';\nimport './modal.css';\n\nclass Modal extends React.Component{\n    constructor(props){\n        super(props);\n        this.close = this.close.bind(this);\n        this.state ={\n            data: {},\n            display: this.props.display\n        }\n    }\n    componentDidUpdate( oldProps, oldState ){\n        if(oldProps.display !== this.props.display){\n            this.setState({\n                display: this.props.display\n            })\n        }\n    }\n    close(){\n        this.props.closeCallback();\n        this.setState({\n            display: false\n        })\n    }\n    render(){\n        return(\n            <div className=\"modal shadow\" style={{display: this.props.display ? 'block' : 'none' }}>\n                <div className=\"body\">\n                    <div className=\"close\" onClick={this.close}>X</div>\n                    <div className=\"content\">{this.props.children}</div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Modal;","import React from 'react';\nimport {Link} from 'react-router-dom';\nimport handleToken from './handleToken';\nimport Modal from './modal/Modal.js';\nimport {getMonth, getDayOfWeek, getOrdinal} from './dateConvert.js';\n\nclass TodoDetails extends React.Component{\n    constructor(props){\n        super(props);\n        this.hideModal = this.hideModal.bind( this );\n        this.confirmDelete = this.confirmDelete.bind( this );\n        this.handleDelete = this.handleDelete.bind( this );\n        this.edit = this.edit.bind( this );\n        this.state ={\n            data: {},\n            modalMessage: null\n        }\n    }\n    componentDidMount(){\n        fetch('/api/items/'+this.props.match.params.id,{\n            headers: {\n                token: localStorage.getItem('userToken')\n            }\n        })\n            .then( res => {\n                handleToken( res );\n                return res.json();\n             })\n            .then( data => {\n                this.setState({\n                    data\n                });\n            })\n    }\n    hideModal(){\n        this.setState({\n            modalMessage: null\n        })\n    }\n    confirmDelete(){\n        this.setState({\n            modalMessage: <React.Fragment>\n                You are about to delete <em>{this.state.data.title}</em>\n                <p>Are you sure?</p>\n                <span className=\"button\" onClick={this.handleDelete}>Delete</span><span onClick={this.hideModal} className=\"button\">Cancel</span>\n            </React.Fragment>\n        })\n    }\n    handleDelete(){\n        fetch('/api/items/'+this.props.match.params.id,{\n            method:'DELETE',\n            headers: {\n                token: localStorage.getItem('userToken')\n            }\n        })\n        .then( (res)=>{\n            handleToken( res );\n            this.props.history.push('/list');\n        } )\n    }\n    edit(){\n        this.props.history.push('/edit/' + this.props.match.params.id );\n    }\n    render(){\n        const dateObject = new Date(this.state.data.added);\n        const formattedDate = `${getDayOfWeek(dateObject)}, ${getMonth(dateObject)} ${dateObject.getDate()}${getOrdinal(dateObject.getDate())}, ${dateObject.getFullYear()}`;\n        return (\n            <div className=\"details justify-content-around\">\n                <div className=\"titleControls row text-light bg-dark\">\n                    <div className=\"title col-6 h3 align-middle\">{this.state.data.title}</div>\n                    <div className=\"controls col-6 form-group\">\n                        <label className=\"col-4\">Complete:<input value=\"completed\" name=\"completed\" className=\"completeCheckbox\" type=\"checkbox\"/></label>\n                        <div className=\"btn btn-danger col-4\" onClick={this.confirmDelete}>Delete</div>\n                        <div className=\"btn col-4 btn-info\" onClick={this.edit}><i className=\"fa fa-edit\"></i></div>\n                    </div>\n                </div>\n                <div name=\"description\" className=\"description blockquote border\">{this.state.data.description}</div>\n                <div>{formattedDate}</div>\n                <Modal closeCallback={this.hideModal} display={this.state.modalMessage!==null}>\n                    {this.state.modalMessage}\n                </Modal>\n            </div>\n        );\n    }\n}\n\nexport default TodoDetails;","import React from 'react';\nimport handleToken from './handleToken';\n\nclass TodoCreate extends React.Component{\n    constructor(props){\n        super(props);\n        this.updateFormElement= this.updateFormElement.bind( this );\n        this.saveItem = this.saveItem.bind( this );\n        this.cancelItem = this.cancelItem.bind( this );\n        this.state = {\n            form: {\n                title: '',\n                description: ''\n            },\n            edit: false\n        }\n    }\n    componentDidMount(){\n        if(this.props.match.params.id){\n            fetch('/api/items/'+this.props.match.params.id,{\n                headers: {\n                    token: localStorage.getItem('userToken')\n                }\n            })\n            .then( res => {\n                handleToken( res );\n                return res.json();\n                })\n            .then( data => {\n                this.setState({\n                    form:{\n                        title: data.title,\n                        description: data.description,\n                        completed: data.completed\n                    },\n                    edit: true\n                });\n            })\n        }\n    }\n    updateFormElement(e){\n        const target = e.target;\n        const name = target.getAttribute('name');\n        const value = target.value;\n        const form = {...this.state.form};\n        form[name] = value;\n        this.setState( {\n            form\n        });\n    }\n    cancelItem(){\n        this.props.history.push('/list');\n    }\n    saveItem(){\n        if(this.state.edit){\n            this.putItem();\n        } else {\n            this.postItem();\n        }\n    }\n    postItem(){\n        fetch('/api/items/',{\n            method:'POST',\n            body: JSON.stringify( this.state.form ),\n            headers: {\n                token: localStorage.getItem('userToken'),\n                'Content-Type': 'application/json',\n            }\n        })\n        .then( (res)=>{\n            handleToken( res );\n            this.props.history.push('/list');\n        } )        \n    }\n    putItem(){\n        fetch('/api/items/'+this.props.match.params.id,{\n            method:'PUT',\n            body: JSON.stringify( this.state.form ),\n            headers: {\n                token: localStorage.getItem('userToken'),\n                'Content-Type': 'application/json',\n            }\n        })\n        .then( (res)=>{\n            handleToken( res );\n            this.props.history.push('/list');\n        } )        \n    }\n    render(){\n        if(this.state.edit){\n            return (\n                <div className=\"create-edit edit\">\n                    <div className='row'>\n                        <div className=\"form-group col-8\">\n                            <input onChange={this.updateFormElement} type=\"text\" name=\"title\" value={this.state.form.title} className=\"title form-control\" placeholder=\"title\"/>\n                        </div>\n                        <div className=\"form-group col-2\">\n                            <input id=\"completedCheckBox\" value=\"completed\" name=\"completed\" className=\"completeCheckbox form-check-input col-4\" type=\"checkbox\"/>\n                            <label for=\"completedCheckbox\" className=\"col-8 form-check-label\">Complete</label>\n                        </div>\n                    </div>\n                    <div className=\"row\">\n                        <div className=\"form-group col-8\">\n                            <textarea onChange={this.updateFormElement} name=\"description\" value={this.state.form.description} className=\"description form-control\" placeholder='description'></textarea>\n                        </div>   \n                        <div className=\"form-group col-4\">\n                            <div onClick={this.saveItem} className=\"btn btn-success saveButton\">save</div>\n                            <div onClick={this.cancelItem} className=\"cancelButton btn btn-warning\">cancel</div> \n                        </div>        \n                    </div>\n                </div>\n            );\n        } else {\n            return(\n                <div className=\"create-edit create\">\n                    <div className='row'>\n                        <div className=\"form-group col-12\">\n                            <input onChange={this.updateFormElement} type=\"text\" name=\"title\" value={this.state.form.title} className=\"title form-control\" placeholder=\"title\"/>\n                        </div>\n                    </div>\n                    <div className=\"row\">\n                        <div className=\"form-group col-8\">\n                            <textarea onChange={this.updateFormElement} name=\"description\" value={this.state.form.description} className=\"description form-control\" placeholder='description'></textarea>\n                        </div>   \n                        <div className=\"form-group col-4\">\n                            <div onClick={this.saveItem} className=\"btn btn-success saveButton\">save</div>\n                            <div onClick={this.cancelItem} className=\"cancelButton btn btn-warning\">cancel</div> \n                        </div>        \n                    </div>     \n                </div>            \n            );\n        }\n\n    }\n}\n\nexport default TodoCreate;","import React from 'react';\nimport './TodoApp.css';\nimport {Switch, Route, Link, withRouter} from 'react-router-dom';\nimport TodoList from './TodoList';\nimport TodoDetails from './TodoDetails';  \nimport TodoCreate from './TodoCreate';\n\nclass TodoApp extends React.Component{\n  constructor(props){\n    super(props);\n    this.menu = {\n      'list' : [\n        <Link className=\"navLink btn btn-success\" key='create' to=\"/create\"><i className=\"fa fa-plus\"></i></Link>\n      ],\n      'create': [\n        <Link className=\"navLink btn btn-primary\" key='list' to=\"/list\">Back</Link>\n      ],\n      'details': [\n        <Link className=\"navLink btn btn-primary\" key='list' to=\"/list\">Back</Link>,\n      ]\n    }\n    this.menu[''] = this.menu['list']\n  }\n  render(){\n    const pathParts = this.props.location.pathname.split('/');\n    const currentMenu = this.menu[ pathParts[1] ];\n    return(\n      <div className=\"todoApp\">\n        <h1>Todo App</h1>\n        <div id=\"nav\">\n          { currentMenu }\n        </div>\n        <Switch>\n          <Route exact path={['/','/list']} component={TodoList}/ >\n          <Route path='/create' component={TodoCreate}/ >\n          <Route path='/edit/:id' component={TodoCreate}/ >\n          <Route path='/details/:id' component={TodoDetails}/ >\n        </Switch>\n        <footer></footer>\n      </div>\n    );\n  }\n}\n\nexport default withRouter(TodoApp);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport TodoApp from './TodoApp';\nimport {BrowserRouter as Router} from 'react-router-dom';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Router><TodoApp /></Router>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}